import { Promo_code } from './promo_code.schema';
import { ActivityLog } from '../activity_log/activity_log.schema';
import { ActivityLogService } from '../activity_log/activity_log.service';
import { ActivityLogger } from 'Helper/activityLogger';
export declare class PromoCodeService {
    private promoModel;
    private ActivityLogModel;
    private activityLogService;
    private acivityLogger;
    constructor(promoModel: typeof Promo_code, ActivityLogModel: typeof ActivityLog, activityLogService: ActivityLogService, acivityLogger: ActivityLogger);
    createPromo(reqUser: any, createPromoDto: any): Promise<Promo_code>;
    findNamePromo(body: any): Promise<Promo_code>;
    findHeaderPromo(): Promise<Promo_code>;
    allPromoCodesListing(reqbody: any, reqUser: any): Promise<{
        totalRecords: number;
        promocode_listing: {
            created_at: string;
            updated_at: string;
            id: number;
            promo_type: string;
            code: string;
            description: string;
            max_user: number;
            status: string;
            header_Promo: boolean;
            itemId: number[];
            productId: number[];
            end_date: Date;
            start_date: Date;
            discount_per: number;
            created_by: number;
            updated_by: number;
            deleted_at: Date;
            createdAt?: any;
            updatedAt?: any;
            deletedAt?: any;
            version?: any;
            _attributes: Promo_code;
            dataValues: Promo_code;
            _creationAttributes: Promo_code;
            isNewRecord: boolean;
            sequelize: import("sequelize").Sequelize;
            _model: import("sequelize").Model<Promo_code, Promo_code>;
        }[];
    }>;
    PromocodeById(reqUser: any, id: any): Promise<{
        created_at: string;
        updated_at: string;
        id: number;
        promo_type: string;
        code: string;
        description: string;
        max_user: number;
        status: string;
        header_Promo: boolean;
        itemId: number[];
        productId: number[];
        end_date: Date;
        start_date: Date;
        discount_per: number;
        created_by: number;
        updated_by: number;
        deleted_at: Date;
        createdAt?: any;
        updatedAt?: any;
        deletedAt?: any;
        version?: any;
        _attributes: Promo_code;
        dataValues: Promo_code;
        _creationAttributes: Promo_code;
        isNewRecord: boolean;
        sequelize: import("sequelize").Sequelize;
        _model: import("sequelize").Model<Promo_code, Promo_code>;
    }>;
    updatePromoCode(reqUser: any, id: any, reqBody: any): Promise<[affectedCount: number, affectedRows: Promo_code[]]>;
    deletePromoById(reqUser: any, id: any): Promise<[affectedCount: number, affectedRows: Promo_code[]]>;
}
